{"ast":null,"code":"var _jsxFileName = \"/Users/michaelnisnevich/Desktop/typescript/React_Kabzda_kak_podrobno/src/components/UncontrolledInput/UncontrolledInput.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const UncontrolledInput = () => /*#__PURE__*/_jsxDEV(\"input\", {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 3,\n  columnNumber: 40\n}, this);\n_c = UncontrolledInput;\nexport const TrackValueOfUncontrolledInput = () => {\n  _s();\n\n  const [value, setValue] = useState('');\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: e => {\n        setValue(e.currentTarget.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 14\n    }, this), \" - \", value]\n  }, void 0, true);\n};\n\n_s(TrackValueOfUncontrolledInput, \"A2PXPeq8TepW328gUMM4+o8Xryo=\");\n\n_c2 = TrackValueOfUncontrolledInput;\nexport const GetValueOfUncontrolledInputByButtonPress = () => {\n  _s2();\n\n  const [value, setValue] = useState('');\n  const NewElement = /*#__PURE__*/React.createRef();\n\n  const addValue = () => {\n    if (NewElement.current) {\n      setValue(NewElement.current.value);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: NewElement\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        addValue();\n      },\n      children: \"save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this), \" - actual value: \", value]\n  }, void 0, true);\n};\n\n_s2(GetValueOfUncontrolledInputByButtonPress, \"A2PXPeq8TepW328gUMM4+o8Xryo=\");\n\n_c3 = GetValueOfUncontrolledInputByButtonPress;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"UncontrolledInput\");\n$RefreshReg$(_c2, \"TrackValueOfUncontrolledInput\");\n$RefreshReg$(_c3, \"GetValueOfUncontrolledInputByButtonPress\");","map":{"version":3,"sources":["/Users/michaelnisnevich/Desktop/typescript/React_Kabzda_kak_podrobno/src/components/UncontrolledInput/UncontrolledInput.tsx"],"names":["React","useState","UncontrolledInput","TrackValueOfUncontrolledInput","value","setValue","e","currentTarget","GetValueOfUncontrolledInputByButtonPress","NewElement","createRef","addValue","current"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;;AAEA,OAAO,MAAMC,iBAAiB,GAAG,mBAAM;AAAA;AAAA;AAAA;AAAA,QAAhC;KAAMA,iB;AAEb,OAAO,MAAMC,6BAA6B,GAAG,MAAM;AAAA;;AAC/C,QAAK,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAjC;AACA,sBAAO;AAAA,4BAAE;AAAO,MAAA,QAAQ,EAAGK,CAAD,IAAM;AAC5BD,QAAAA,QAAQ,CAACC,CAAC,CAACC,aAAF,CAAgBH,KAAjB,CAAR;AACH;AAFQ;AAAA;AAAA;AAAA;AAAA,YAAF,SAEEA,KAFF;AAAA,kBAAP;AAGH,CALM;;GAAMD,6B;;MAAAA,6B;AAOb,OAAO,MAAMK,wCAAwC,GAAG,MAAM;AAAA;;AAE1D,QAAK,CAACJ,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAjC;AAEA,QAAMQ,UAAU,gBAAGT,KAAK,CAACU,SAAN,EAAnB;;AACA,QAAMC,QAAQ,GAAG,MAAM;AACnB,QAAIF,UAAU,CAACG,OAAf,EAAwB;AACpBP,MAAAA,QAAQ,CAACI,UAAU,CAACG,OAAX,CAAmBR,KAApB,CAAR;AACH;AACJ,GAJD;;AAMA,sBAAO;AAAA,iCAAG;AAAO,MAAA,GAAG,EAAEK;AAAZ;AAAA;AAAA;AAAA;AAAA,YAAH,eACH;AAAQ,MAAA,OAAO,EAAE,MAAM;AAACE,QAAAA,QAAQ;AAAG,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADG,uBACiEP,KADjE;AAAA,kBAAP;AAGH,CAdM;;IAAMI,wC;;MAAAA,wC","sourcesContent":["import React, {useState} from 'react';\n\nexport const UncontrolledInput = () => <input/>\n\nexport const TrackValueOfUncontrolledInput = () => {\n    const[value, setValue] = useState('')\n    return <><input onChange={(e) =>{\n        setValue(e.currentTarget.value)\n    } }/> - {value}</>\n}\n\nexport const GetValueOfUncontrolledInputByButtonPress = () => {\n\n    const[value, setValue] = useState('')\n\n    const NewElement = React.createRef<HTMLInputElement>()\n    const addValue = () => {\n        if (NewElement.current) {\n            setValue(NewElement.current.value)\n        }\n    }\n\n    return <> <input ref={NewElement}/>\n        <button onClick={() => {addValue()}}>save</button> - actual value: {value}\n    </>\n}\n\n"]},"metadata":{},"sourceType":"module"}